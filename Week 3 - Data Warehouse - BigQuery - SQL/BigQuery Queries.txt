CREATE OR REPLACE EXTERNAL TABLE `dtc-de-338723.trips_data_all.external_table` 
OPTIONS (
    format = 'Parquet',
    uris = ['gs://dtc_data_lake_dtc-de-338723/raw/yellow_tripdata_2019-.parquet*', 'gs://dtc_data_lake_dtc-de-338723/raw/yellow_tripdata_2020-*.parquet']
)

SELECT * FROM `dtc-de-338723.trips_data_all.external_table` LIMIT 1000

Create a non-partitioned table from external table

CREATE OR REPLACE TABLE `dtc-de-338723.trips_data_all.yellow_trip_data_non_partitioned` AS
SELECT * FROM `dtc-de-338723.trips_data_all.external_table`

Create a partitioned table from external table

CREATE OR REPLACE TABLE `dtc-de-338723.trips_data_all.yellow_trip_data_partitioned`
PARTITION BY 
    DATE(tpep_pickup_datetime) AS 
SELECT * FROM `dtc-de-338723.trips_data_all.external_table`;


SELECT DISTINCT(VendorID)
FROM `dtc-de-338723.trips_data_all.yellow_trip_data_non_partitioned`
WHERE DATE(tpep_pickup_datetime) BETWEEN '2019-06-01' AND '2019-06-30'

SELECT DISTINCT(VendorID)
FROM `dtc-de-338723.trips_data_all.yellow_trip_data_partitioned`
WHERE DATE(tpep_pickup_datetime) BETWEEN '2019-06-01' AND '2019-06-30'

SELECT table_name, partition_id, total_rows
FROM trips_data_all.INFORMATION_SCHEMA.PARTITIONS
WHERE table_name = 'yellow_trip_data_partitioned'
ORDER BY total_rows DESC;


-- Clustering in BigQuery Create a partition and cluster table
-- Choosing a partition and cluster depends on how you're querying the data. When we query, we filter always on vendor Id and pickup date, therefore it will help performance. 

CREATE OR REPLACE TABLE `dtc-de-338723.trips_data_all.yellow_trip_data_partitioned_clustered`
PARTITION BY DATE(tpep_pickup_datetime)
CLUSTER BY VendorID AS
SELECT * FROM `dtc-de-338723.trips_data_all.external_table`

-- Query scans 369.9 MB Partitioned 0.8sec

SELECT COUNT(*) as trips
FROM `dtc-de-338723.trips_data_all.yellow_trip_data_partitioned`
WHERE DATE(tpep_pickup_datetime) BETWEEN '2019-06-01' AND '2020-12-31'
AND VendorID=1;


-- Query scans 303.7 MB Partitioned + Clustered 0.6sec

SELECT COUNT(*) as trips
FROM `dtc-de-338723.trips_data_all.yellow_trip_data_partitioned_clustered`
WHERE DATE(tpep_pickup_datetime) BETWEEN '2019-06-01' AND '2020-12-31'
AND VendorID=1;



